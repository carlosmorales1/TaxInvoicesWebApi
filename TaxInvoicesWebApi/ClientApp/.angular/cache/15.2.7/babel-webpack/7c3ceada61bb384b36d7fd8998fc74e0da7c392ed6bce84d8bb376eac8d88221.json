{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet CreateInvoiceComponent = class CreateInvoiceComponent {\n  constructor() {\n    this.fixedProducts = [{\n      id: 1,\n      name: 'Product 1',\n      unitPrice: 5000,\n      imageUrl: 'path_to_image_product1.png'\n    }, {\n      id: 2,\n      name: 'Product 2',\n      unitPrice: 10000,\n      imageUrl: 'path_to_image_product2.png'\n    }, {\n      id: 3,\n      name: 'Product 3',\n      unitPrice: 7000,\n      imageUrl: 'path_to_image_product3.png'\n    }\n    // Add more fixed products as needed\n    ];\n\n    this.cartProducts = [];\n    this.selectedProductId = null;\n  }\n  addProductToCart() {\n    this.cartProducts.push({\n      quantity: 1,\n      total: 0\n    });\n  }\n  calculateSubtotal() {\n    let subtotal = 0;\n    for (const cartProduct of this.cartProducts) {\n      if (cartProduct.product != null) {\n        subtotal += cartProduct.product.unitPrice * cartProduct.quantity;\n      }\n    }\n    return subtotal;\n  }\n  calculateTaxes() {\n    return this.calculateSubtotal() * 0.19;\n  }\n  calculateTotal() {\n    return this.calculateSubtotal() + this.calculateTaxes();\n  }\n  onProductSelected(event, producto) {\n    this.selectedProductId = parseInt(event.target.value, 10);\n    const selectedProduct = this.fixedProducts.find(product => product.id === this.selectedProductId);\n    producto.product = selectedProduct;\n  }\n  getSelectedProduct() {\n    if (this.selectedProductId !== null) {\n      return this.fixedProducts.find(product => product.id === this.selectedProductId) || null;\n    }\n    return null;\n  }\n  saveInvoice() {\n    // Implement logic to save the invoice\n    // You can send the invoice data to a server or perform any necessary actions here\n  }\n};\nCreateInvoiceComponent = __decorate([Component({\n  selector: 'app-create-invoice',\n  templateUrl: './create-invoice.component.html',\n  styleUrls: ['./create-invoice.component.css']\n})], CreateInvoiceComponent);\nexport { CreateInvoiceComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAOlC,IAAMC,sBAAsB,GAA5B,MAAMA,sBAAsB;EAA5BC;IACH,kBAAa,GAAmB,CAC9B;MACEC,EAAE,EAAE,CAAC;MACLC,IAAI,EAAE,WAAW;MACjBC,SAAS,EAAE,IAAI;MACfC,QAAQ,EAAE;KACX,EACD;MACEH,EAAE,EAAE,CAAC;MACLC,IAAI,EAAE,WAAW;MACjBC,SAAS,EAAE,KAAK;MAChBC,QAAQ,EAAE;KACX,EACD;MACEH,EAAE,EAAE,CAAC;MACLC,IAAI,EAAE,WAAW;MACjBC,SAAS,EAAE,IAAI;MACfC,QAAQ,EAAE;;IAEd;IAAA,CACD;;IAED,iBAAY,GAAkB,EAAE;IAEhC,sBAAiB,GAAkB,IAAI;EAyCzC;EAvCEC,gBAAgB;IACd,IAAI,CAACC,YAAY,CAACC,IAAI,CAAC;MAAEC,QAAQ,EAAE,CAAC;MAAEC,KAAK,EAAE;IAAC,CAAE,CAAC;EACnD;EAEAC,iBAAiB;IACf,IAAIC,QAAQ,GAAG,CAAC;IAChB,KAAK,MAAMC,WAAW,IAAI,IAAI,CAACN,YAAY,EAAE;MAC3C,IAAIM,WAAW,CAACC,OAAO,IAAI,IAAI,EAAE;QAC/BF,QAAQ,IAAIC,WAAW,CAACC,OAAO,CAACV,SAAS,GAAGS,WAAW,CAACJ,QAAQ;;;IAGpE,OAAOG,QAAQ;EACjB;EAEAG,cAAc;IACZ,OAAO,IAAI,CAACJ,iBAAiB,EAAE,GAAG,IAAI;EACxC;EAEAK,cAAc;IACZ,OAAO,IAAI,CAACL,iBAAiB,EAAE,GAAG,IAAI,CAACI,cAAc,EAAE;EACzD;EAEAE,iBAAiB,CAACC,KAAU,EAAEC,QAAqB;IACjD,IAAI,CAACC,iBAAiB,GAAGC,QAAQ,CAACH,KAAK,CAACI,MAAM,CAACC,KAAK,EAAE,EAAE,CAAC;IACzD,MAAMC,eAAe,GAAG,IAAI,CAACC,aAAa,CAACC,IAAI,CAACZ,OAAO,IAAIA,OAAO,CAACZ,EAAE,KAAK,IAAI,CAACkB,iBAAiB,CAAC;IACjGD,QAAQ,CAACL,OAAO,GAAGU,eAAe;EACpC;EAEAG,kBAAkB;IAChB,IAAI,IAAI,CAACP,iBAAiB,KAAK,IAAI,EAAE;MACnC,OAAO,IAAI,CAACK,aAAa,CAACC,IAAI,CAACZ,OAAO,IAAIA,OAAO,CAACZ,EAAE,KAAK,IAAI,CAACkB,iBAAiB,CAAC,IAAI,IAAI;;IAE1F,OAAO,IAAI;EACb;EAEAQ,WAAW;IACT;IACA;EAAA;CAEH;AAlEY5B,sBAAsB,eALlCD,SAAS,CAAC;EACT8B,QAAQ,EAAE,oBAAoB;EAC9BC,WAAW,EAAE,iCAAiC;EAC9CC,SAAS,EAAE,CAAC,gCAAgC;CAC7C,CAAC,GACW/B,sBAAsB,CAkElC;SAlEYA,sBAAsB","names":["Component","CreateInvoiceComponent","constructor","id","name","unitPrice","imageUrl","addProductToCart","cartProducts","push","quantity","total","calculateSubtotal","subtotal","cartProduct","product","calculateTaxes","calculateTotal","onProductSelected","event","producto","selectedProductId","parseInt","target","value","selectedProduct","fixedProducts","find","getSelectedProduct","saveInvoice","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Carlos Morales\\Documents\\dev\\TEST\\TaxInvoicesWebApi\\TaxInvoicesWebApi\\ClientApp\\src\\app\\create-invoice\\create-invoice.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-create-invoice',\r\n  templateUrl: './create-invoice.component.html',\r\n  styleUrls: ['./create-invoice.component.css']\r\n})\r\nexport class CreateInvoiceComponent {\r\n    fixedProducts: FixedProduct[] = [\r\n      {\r\n        id: 1,\r\n        name: 'Product 1',\r\n        unitPrice: 5000,\r\n        imageUrl: 'path_to_image_product1.png',\r\n      },\r\n      {\r\n        id: 2,\r\n        name: 'Product 2',\r\n        unitPrice: 10000,\r\n        imageUrl: 'path_to_image_product2.png',\r\n      },\r\n      {\r\n        id: 3,\r\n        name: 'Product 3',\r\n        unitPrice: 7000,\r\n        imageUrl: 'path_to_image_product3.png',\r\n      },\r\n    // Add more fixed products as needed\r\n  ];\r\n\r\n  cartProducts: CartProduct[] = [];\r\n\r\n  selectedProductId: number | null = null;\r\n\r\n  addProductToCart() {\r\n    this.cartProducts.push({ quantity: 1, total: 0 });\r\n  }\r\n\r\n  calculateSubtotal() {\r\n    let subtotal = 0;\r\n    for (const cartProduct of this.cartProducts) {\r\n      if (cartProduct.product != null) {\r\n        subtotal += cartProduct.product.unitPrice * cartProduct.quantity;\r\n      }\r\n    }\r\n    return subtotal;\r\n  }\r\n\r\n  calculateTaxes() {\r\n    return this.calculateSubtotal() * 0.19;\r\n  }\r\n\r\n  calculateTotal() {\r\n    return this.calculateSubtotal() + this.calculateTaxes();\r\n  }\r\n\r\n  onProductSelected(event: any, producto: CartProduct) {\r\n    this.selectedProductId = parseInt(event.target.value, 10);\r\n    const selectedProduct = this.fixedProducts.find(product => product.id === this.selectedProductId);\r\n    producto.product = selectedProduct;\r\n  }\r\n\r\n  getSelectedProduct(): FixedProduct | null {\r\n    if (this.selectedProductId !== null) {\r\n      return this.fixedProducts.find(product => product.id === this.selectedProductId) || null;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  saveInvoice() {\r\n    // Implement logic to save the invoice\r\n    // You can send the invoice data to a server or perform any necessary actions here\r\n  }\r\n}\r\n// Define an interface for fixed products\r\ninterface FixedProduct {\r\n  id: number;\r\n  name: string;\r\n  unitPrice: number,\r\n  imageUrl: string;\r\n}\r\n\r\n// Define an interface for products in the cart\r\ninterface CartProduct {\r\n  product?: FixedProduct;\r\n  quantity: number;\r\n  total: number\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}