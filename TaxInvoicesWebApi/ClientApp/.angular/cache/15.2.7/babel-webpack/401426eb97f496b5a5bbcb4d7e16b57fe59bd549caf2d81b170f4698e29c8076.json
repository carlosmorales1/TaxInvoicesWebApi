{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport Swal from 'sweetalert2';\nlet CreateInvoiceComponent = class CreateInvoiceComponent {\n  constructor(apiService) {\n    this.apiService = apiService;\n    this.fixedProducts = [];\n    this.customers = [];\n    this.cartProducts = [];\n  }\n  ngOnInit() {\n    this.getCustomer();\n    this.getProductos();\n  }\n  getProductos() {\n    this.apiService.get('products').subscribe(data => {\n      this.fixedProducts = data.map(product => {\n        return {\n          id: product.id,\n          name: product.nombreProducto,\n          unitPrice: product.precioUnitario,\n          imageUrl: product.imagenProducto\n        };\n      });\n    });\n  }\n  getCustomer() {\n    this.apiService.get('customer').subscribe(data => {\n      this.customers = data.map(product => {\n        return {\n          id: product.id,\n          businessName: product.razonSocial\n        };\n      });\n    });\n  }\n  clearCart() {\n    if (this.cartProducts.length > 0) {\n      Swal.fire({\n        title: 'Limpiar Carrito',\n        text: '¿Estás seguro de que deseas eliminar todos los productos del carrito?',\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonText: 'Sí, Limpiar',\n        cancelButtonText: 'Cancelar'\n      }).then(result => {\n        if (result.isConfirmed) {\n          this.cartProducts = [];\n          Swal.fire('Carrito limpiado', '', 'success');\n        }\n      });\n    } else {\n      Swal.fire('Carrito Vacío', 'El carrito ya está vacío.', 'info');\n    }\n  }\n  addProductToCart() {\n    this.cartProducts.push({\n      quantity: 1,\n      total: 0\n    });\n  }\n  calculateSubtotal() {\n    let subtotal = 0;\n    for (const cartProduct of this.cartProducts) {\n      if (cartProduct.product != null) {\n        subtotal += cartProduct.product.unitPrice * cartProduct.quantity;\n      }\n    }\n    return subtotal;\n  }\n  calculateTaxes() {\n    return this.calculateSubtotal() * 0.19;\n  }\n  calculateTotal() {\n    return this.calculateSubtotal() + this.calculateTaxes();\n  }\n  onCustomerSelected(event) {}\n  onProductSelected(event, producto) {\n    producto.total = 0;\n    const selectedProductId = parseInt(event.target.value, 10);\n    const selectedProduct = this.fixedProducts.find(product => product.id === selectedProductId);\n    producto.product = selectedProduct;\n    producto.total = producto.quantity * selectedProduct.unitPrice;\n  }\n  changeQuantity(event, producto) {\n    const quantity = parseInt(event.target.value, 10);\n    producto.quantity = quantity;\n    if (producto.product != null) {\n      producto.total = quantity * producto.product.unitPrice;\n    }\n  }\n  formatPrice(price) {\n    return price.toLocaleString('es-CO', {\n      style: 'decimal',\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    });\n  }\n  saveInvoice() {\n    // Implement logic to save the invoice\n    // You can send the invoice data to a server or perform any necessary actions here\n  }\n};\nCreateInvoiceComponent = __decorate([Component({\n  selector: 'app-create-invoice',\n  templateUrl: './create-invoice.component.html',\n  styleUrls: ['./create-invoice.component.css']\n})], CreateInvoiceComponent);\nexport { CreateInvoiceComponent };","map":{"version":3,"mappings":"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","names":["Component","Swal","CreateInvoiceComponent","constructor","apiService","ngOnInit","getCustomer","getProductos","get","subscribe","data","fixedProducts","map","product","id","name","nombreProducto","unitPrice","precioUnitario","imageUrl","imagenProducto","customers","businessName","razonSocial","clearCart","cartProducts","length","fire","title","text","icon","showCancelButton","confirmButtonText","cancelButtonText","then","result","isConfirmed","addProductToCart","push","quantity","total","calculateSubtotal","subtotal","cartProduct","calculateTaxes","calculateTotal","onCustomerSelected","event","onProductSelected","producto","selectedProductId","parseInt","target","value","selectedProduct","find","changeQuantity","formatPrice","price","toLocaleString","style","minimumFractionDigits","maximumFractionDigits","saveInvoice","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Carlos Morales\\Documents\\dev\\TEST\\TaxInvoicesWebApi\\TaxInvoicesWebApi\\ClientApp\\src\\app\\create-invoice\\create-invoice.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport Swal from 'sweetalert2';\r\nimport { ApiService } from '../api.service';\r\nimport { CartProductModel, FixedProductModel, ProductsESModel, CustomerESModel, CustomerModel } from './models-invoice';\r\n\r\n@Component({\r\n  selector: 'app-create-invoice',\r\n  templateUrl: './create-invoice.component.html',\r\n  styleUrls: ['./create-invoice.component.css']\r\n})\r\nexport class CreateInvoiceComponent implements OnInit{\r\n  constructor(private apiService: ApiService) {}\r\n\r\n  fixedProducts: FixedProductModel[] = [];\r\n  customers: CustomerModel[] = [];\r\n  \r\n\r\n  ngOnInit() {\r\n    this.getCustomer();\r\n    this.getProductos();\r\n  }\r\n\r\n  getProductos() {\r\n    this.apiService.get('products').subscribe((data: ProductsESModel[]) => {\r\n      this.fixedProducts = data.map((product: ProductsESModel) => {\r\n        return {\r\n          id: product.id,\r\n          name: product.nombreProducto,\r\n          unitPrice: product.precioUnitario,\r\n          imageUrl: product.imagenProducto\r\n        };\r\n      });\r\n    });\r\n  }\r\n\r\n  getCustomer() {\r\n    this.apiService.get('customer').subscribe((data: CustomerESModel[]) => {\r\n      this.customers = data.map((product: CustomerESModel) => {\r\n        return {\r\n          id: product.id,\r\n          businessName: product.razonSocial,\r\n        };\r\n      });\r\n    });\r\n  }\r\n\r\n  cartProducts: CartProductModel[] = [];\r\n\r\n  clearCart() {\r\n    if (this.cartProducts.length > 0) {\r\n      Swal.fire({\r\n        title: 'Limpiar Carrito',\r\n        text: '¿Estás seguro de que deseas eliminar todos los productos del carrito?',\r\n        icon: 'warning',\r\n        showCancelButton: true,\r\n        confirmButtonText: 'Sí, Limpiar',\r\n        cancelButtonText: 'Cancelar'\r\n      }).then((result) => {\r\n        if (result.isConfirmed) {\r\n          this.cartProducts = [];\r\n          Swal.fire('Carrito limpiado', '', 'success');\r\n        }\r\n      });\r\n    } else {\r\n      Swal.fire('Carrito Vacío', 'El carrito ya está vacío.', 'info');\r\n    }\r\n  }\r\n\r\n  addProductToCart() {\r\n    this.cartProducts.push({ quantity: 1, total: 0 });\r\n  }\r\n\r\n  calculateSubtotal() {\r\n    let subtotal = 0;\r\n    for (const cartProduct of this.cartProducts) {\r\n      if (cartProduct.product != null) {\r\n        subtotal += cartProduct.product.unitPrice * cartProduct.quantity;\r\n      }\r\n    }\r\n    return subtotal;\r\n  }\r\n\r\n  calculateTaxes() {\r\n    return this.calculateSubtotal() * 0.19;\r\n  }\r\n\r\n  calculateTotal() {\r\n    return this.calculateSubtotal() + this.calculateTaxes();\r\n  }\r\n\r\n  onCustomerSelected(event: any){\r\n\r\n  }\r\n\r\n  onProductSelected(event: any, producto: CartProductModel) {\r\n    producto.total = 0;\r\n    const selectedProductId = parseInt(event.target.value, 10);\r\n    const selectedProduct = this.fixedProducts.find(product => product.id === selectedProductId);\r\n    producto.product = selectedProduct;\r\n    producto.total = producto.quantity * selectedProduct!.unitPrice;\r\n  }\r\n\r\n  changeQuantity(event: any, producto: CartProductModel) {\r\n    const quantity = parseInt(event.target.value, 10);\r\n    producto.quantity = quantity;\r\n    if (producto.product != null ) {\r\n      producto.total = quantity * producto.product.unitPrice;\r\n    }\r\n  }\r\n\r\n  formatPrice(price: number): string {\r\n    return price.toLocaleString('es-CO', { style: 'decimal', minimumFractionDigits: 2, maximumFractionDigits: 2 });\r\n  }\r\n\r\n  saveInvoice() {\r\n    // Implement logic to save the invoice\r\n    // You can send the invoice data to a server or perform any necessary actions here\r\n  }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}